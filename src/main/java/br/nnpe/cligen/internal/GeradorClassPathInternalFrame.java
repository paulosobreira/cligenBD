package br.nnpe.cligen.internal;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;

import javax.swing.JFileChooser;
import javax.swing.ProgressMonitor;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;

import br.nnpe.cligen.BarraSetTop;


/**
*
* @author  Sobreira
* Created on 21 de Janeiro de 2003, 17:23
*/
public class GeradorClassPathInternalFrame extends javax.swing.JInternalFrame
    implements Runnable {
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea out;
    private static int numJanela;
    // End of variables declaration//GEN-END:variables
    private File fileName;
    private int contaArq;
    private int current;
    private ArrayList lista;
    private javax.swing.Timer filtraJarMonitor;
    private javax.swing.Timer numArqsMonitor;
    private boolean passo1;
    private ProgressMonitor progressDialog;

    /** Creates new form internal3 */
    public GeradorClassPathInternalFrame() {
        initComponents();
        numJanela++;
    }
    public String getTitle() {
        return super.getTitle() + " " + numJanela;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() { //GEN-BEGIN:initComponents
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        out = new javax.swing.JTextArea();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Gerador de CLASSPATH");
        setPreferredSize(new java.awt.Dimension(500, 300));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(new javax.swing.border.TitledBorder("Output"));
        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        jButton1.setText("Diretorio");
        jButton1.addActionListener(
            new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton1ActionPerformed(evt);
                }
            }
        );

        jPanel2.add(jButton1);

        jButton2.setText("Iniciar");
        jButton2.setEnabled(false);
        jButton2.addActionListener(
            new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton2ActionPerformed(evt);
                }
            }
        );

        jPanel2.add(jButton2);

        jProgressBar1.setStringPainted(true);
        jPanel2.add(jProgressBar1);

        jPanel1.add(jPanel2, java.awt.BorderLayout.SOUTH);

        out.setWrapStyleWord(true);
        jScrollPane1.setViewportView(out);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane()
            .add(jPanel1, java.awt.BorderLayout.CENTER);
        addInternalFrameListener(
            new InternalFrameAdapter() {
                public void internalFrameClosing(InternalFrameEvent e) {
                    super.internalFrameClosing(e);
                    BarraSetTop.removerJIntenalFrame(
                        GeradorClassPathInternalFrame.this
                    );
                }
            }
        );
        pack();
    } //GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) { //GEN-FIRST:event_jButton2ActionPerformed

        // Add your handling code here:
        jButton2.setEnabled(false);
        jProgressBar1.setMaximum(contaArq);
        filtraJarMonitor =
            new javax.swing.Timer(
                50,
                new ActionListener() {
                    public void actionPerformed(ActionEvent event) {
                        // show progress
                        jProgressBar1.setValue(current);

                        // check if task is completed
                        if (current == contaArq) {
                            filtraJarMonitor.stop();
                            jButton2.setEnabled(true);
                        }
                    }
                }
            );

        Thread activity = new Thread(this);
        activity.setPriority(3);
        activity.start();
        filtraJarMonitor.start();
    } //GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) { //GEN-FIRST:event_jButton1ActionPerformed

        // Add your handling code here:
        current = 0;
        contaArq = 0;
        passo1 = true;
        jButton1.setEnabled(false);

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int result = fileChooser.showOpenDialog(this);

        // user clicked Cancel button on dialog
        if (result == JFileChooser.CANCEL_OPTION) {
            return;
        }

        fileName = fileChooser.getSelectedFile();
        out.append(fileName.getAbsolutePath() + "\n");
        lista = new ArrayList();

        final Thread activity = new Thread(this);
        progressDialog =
            new ProgressMonitor(
                GeradorClassPathInternalFrame.this,
                "Contando os Arquivos no Disco", null, 0, 20000
            );
        numArqsMonitor =
            new javax.swing.Timer(
                50,
                new ActionListener() {
                    public void actionPerformed(ActionEvent event) { // show progress
                        progressDialog.setProgress(contaArq);

                        // check if task is completed or canceled
                        if (progressDialog.isCanceled()) {
                            out.append("Cancelar Bugado\n");
                            numArqsMonitor.stop();
                        }

                        if (!passo1) {
                            numArqsMonitor.stop();
                            progressDialog.close();

                            //activity.interrupt();
                        }
                    }
                }
            );
        activity.start();
        activity.setPriority(3);
        numArqsMonitor.start();
    } //GEN-LAST:event_jButton1ActionPerformed

    public void numArqs(File aFile) {
        File[] files = aFile.listFiles();

        for (int i = 0; i < files.length; i++)
            if (files[i].isFile()) {
                /*  try { Thread.currentThread().sleep(1);  }
                 catch(InterruptedException e){ return;  }*/
                contaArq++;
            } else {
                numArqs(files[i]);
            }
    }

    public void filtraJar(File aFile) {
        File[] files = aFile.listFiles();

        for (int i = 0; i < files.length; i++)
            if (files[i].isFile()) {
                /*try { Thread.currentThread().sleep(1);  }
                catch(InterruptedException e){  return; }*/
                current++;

                String name = files[i].getName();

                if (name.regionMatches(true, (name.length() - 3), "jar", 0, 3)) {
                    lista.listIterator()
                         .add(files[i]);
                }
            } else {
                filtraJar(files[i]);
            }

        return;
    }

    public void run() {
        if (passo1) {
            numArqs(fileName);
            out.append("NÃºmero de arquivos :" + contaArq + "\n");
            passo1 = false;
            jButton1.setEnabled(true);
            jButton2.setEnabled(true);
        } else {
            filtraJar(fileName);
            out.append("set CLASSPATH=");

            for (int i = 0; i < lista.size(); i++) {
                out.append(((File) lista.get(i)).getAbsolutePath() + ";");
            }

            out.append("%CLASSPATH%;");
        }
    }
}
